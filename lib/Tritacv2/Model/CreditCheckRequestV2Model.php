<?php
/**
 * CreditCheckRequestV2Model
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Capayable API V2
 *
 * API for Pay after delivery and Pay in 3 installments
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

//namespace Swagger\Client\Model;

//use \ArrayAccess;

/**
 * CreditCheckRequestV2Model Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Tritacv2_Model_CreditCheckRequestV2Model implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreditCheckRequestV2Model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_name'             => 'string',
        'initials'              => 'string',
        'gender'                => 'string',
        'birth_date'            => '\DateTime',
        'street_name'           => 'string',
        'house_number'          => 'int',
        'house_number_suffix'   => 'string',
        'zip_code'              => 'string',
        'city'                  => 'string',
        'country_code'          => 'string',
        'has_different_shipping_address' => 'bool',
        'shipping_street_name'  => 'string',
        'shipping_house_number' => 'int',
        'shipping_house_number_suffix' => 'string',
        'shipping_zip_code'     => 'string',
        'shipping_city'         => 'string',
        'shipping_country_code' => 'string',
        'phone_number'          => 'string',
        'fax_number'            => 'string',
        'email_address'         => 'string',
        'ip_address'            => 'string',
        'is_corporation'        => 'bool',
        'is_sole_proprietor'    => 'bool',
        'corporation_name'      => 'string',
        'co_c_number'           => 'string',
        'is_final'              => 'bool',
        'claim_amount'          => 'int',
        'is_in_three_installments' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'last_name'             => 'LastName',
        'initials'              => 'Initials',
        'gender'                => 'Gender',
        'birth_date'            => 'BirthDate',
        'street_name'           => 'StreetName',
        'house_number'          => 'HouseNumber',
        'house_number_suffix'   => 'HouseNumberSuffix',
        'zip_code'              => 'ZipCode',
        'city'                  => 'City',
        'country_code'          => 'CountryCode',
        'has_different_shipping_address' => 'HasDifferentShippingAddress',
        'shipping_street_name'  => 'ShippingStreetName',
        'shipping_house_number' => 'ShippingHouseNumber',
        'shipping_house_number_suffix' => 'ShippingHouseNumberSuffix',
        'shipping_zip_code'     => 'ShippingZipCode',
        'shipping_city'         => 'ShippingCity',
        'shipping_country_code' => 'ShippingCountryCode',
        'phone_number'          => 'PhoneNumber',
        'fax_number'            => 'FaxNumber',
        'email_address'         => 'EmailAddress',
        'ip_address'            => 'IpAddress',
        'is_corporation'        => 'IsCorporation',
        'is_sole_proprietor'    => 'IsSoleProprietor',
        'corporation_name'      => 'CorporationName',
        'co_c_number'           => 'CoCNumber',
        'is_final'              => 'IsFinal',
        'claim_amount'          => 'ClaimAmount',
        'is_in_three_installments' => 'IsInThreeInstallments'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'last_name'                 => 'setLastName',
        'initials'                  => 'setInitials',
        'gender'                    => 'setGender',
        'birth_date'                => 'setBirthDate',
        'street_name'               => 'setStreetName',
        'house_number'              => 'setHouseNumber',
        'house_number_suffix'       => 'setHouseNumberSuffix',
        'zip_code'                  => 'setZipCode',
        'city'                      => 'setCity',
        'country_code'              => 'setCountryCode',
        'has_different_shipping_address' => 'setHasDifferentShippingAddress',
        'shipping_street_name'          => 'setShippingStreetName',
        'shipping_house_number'         => 'setShippingHouseNumber',
        'shipping_house_number_suffix'  => 'setShippingHouseNumberSuffix',
        'shipping_zip_code'             => 'setShippingZipCode',
        'shipping_city'                 => 'setShippingCity',
        'shipping_country_code'         => 'setShippingCountryCode',
        'phone_number'              => 'setPhoneNumber',
        'fax_number'                => 'setFaxNumber',
        'email_address'             => 'setEmailAddress',
        'ip_address'                => 'setIpAddress',
        'is_corporation'            => 'setIsCorporation',
        'is_sole_proprietor'        => 'setIsSoleProprietor',
        'corporation_name'          => 'setCorporationName',
        'co_c_number'               => 'setCoCNumber',
        'is_final'                  => 'setIsFinal',
        'claim_amount'              => 'setClaimAmount',
        'is_in_three_installments'  => 'setIsInThreeInstallments'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'last_name'             => 'getLastName',
        'initials'              => 'getInitials',
        'gender'                => 'getGender',
        'birth_date'            => 'getBirthDate',
        'street_name'           => 'getStreetName',
        'house_number'          => 'getHouseNumber',
        'house_number_suffix'   => 'getHouseNumberSuffix',
        'zip_code'              => 'getZipCode',
        'city'                  => 'getCity',
        'country_code'          => 'getCountryCode',
        'has_different_shipping_address' => 'getHasDifferentShippingAddress',
        'shipping_street_name'  => 'getShippingStreetName',
        'shipping_house_number' => 'getShippingHouseNumber',
        'shipping_house_number_suffix' => 'getShippingHouseNumberSuffix',
        'shipping_zip_code'     => 'getShippingZipCode',
        'shipping_city'         => 'getShippingCity',
        'shipping_country_code' => 'getShippingCountryCode',
        'phone_number'          => 'getPhoneNumber',
        'fax_number'            => 'getFaxNumber',
        'email_address'         => 'getEmailAddress',
        'ip_address'            => 'getIpAddress',
        'is_corporation'        => 'getIsCorporation',
        'is_sole_proprietor'    => 'getIsSoleProprietor',
        'corporation_name'      => 'getCorporationName',
        'co_c_number'           => 'getCoCNumber',
        'is_final'              => 'getIsFinal',
        'claim_amount'          => 'getClaimAmount',
        'is_in_three_installments' => 'getIsInThreeInstallments'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const GENDER_MALE = 'MALE';
    const GENDER_FEMALE = 'FEMALE';
    const GENDER_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
            self::GENDER_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_name']               = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['initials']                = isset($data['initials']) ? $data['initials'] : null;
        $this->container['gender']                  = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birth_date']              = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['street_name']             = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['house_number']            = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['house_number_suffix']     = isset($data['house_number_suffix']) ? $data['house_number_suffix'] : null;
        $this->container['zip_code']                = isset($data['zip_code']) ? $data['zip_code'] : null;
        $this->container['city']                    = isset($data['city']) ? $data['city'] : null;
        $this->container['country_code']            = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['has_different_shipping_address'] = isset($data['has_different_shipping_address']) ? $data['has_different_shipping_address'] : null;
        $this->container['shipping_street_name']    = isset($data['shipping_street_name']) ? $data['shipping_street_name'] : null;
        $this->container['shipping_house_number']   = isset($data['shipping_house_number']) ? $data['shipping_house_number'] : null;
        $this->container['shipping_house_number_suffix'] = isset($data['shipping_house_number_suffix']) ? $data['shipping_house_number_suffix'] : null;
        $this->container['shipping_zip_code']       = isset($data['shipping_zip_code']) ? $data['shipping_zip_code'] : null;
        $this->container['shipping_city']           = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_country_code']   = isset($data['shipping_country_code']) ? $data['shipping_country_code'] : null;
        $this->container['phone_number']            = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['fax_number']              = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['email_address']           = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['ip_address']              = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['is_corporation']          = isset($data['is_corporation']) ? $data['is_corporation'] : null;
        $this->container['is_sole_proprietor']      = isset($data['is_sole_proprietor']) ? $data['is_sole_proprietor'] : null;
        $this->container['corporation_name']        = isset($data['corporation_name']) ? $data['corporation_name'] : null;
        $this->container['co_c_number']             = isset($data['co_c_number']) ? $data['co_c_number'] : null;
        $this->container['is_final']                = isset($data['is_final']) ? $data['is_final'] : null;
        $this->container['claim_amount']            = isset($data['claim_amount']) ? $data['claim_amount'] : null;
        $this->container['is_in_three_installments'] = isset($data['is_in_three_installments']) ? $data['is_in_three_installments'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ((strlen($this->container['last_name']) > 100)) {
            $invalid_properties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 100.";
        }

        if ((strlen($this->container['last_name']) < 0)) {
            $invalid_properties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['initials'] === null) {
            $invalid_properties[] = "'initials' can't be null";
        }
        if ((strlen($this->container['initials']) > 10)) {
            $invalid_properties[] = "invalid value for 'initials', the character length must be smaller than or equal to 10.";
        }

        if ((strlen($this->container['initials']) < 0)) {
            $invalid_properties[] = "invalid value for 'initials', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['gender'] === null) {
            $invalid_properties[] = "'gender' can't be null";
        }
        $allowed_values = ["MALE", "FEMALE", "UNKNOWN"];
        if (!in_array($this->container['gender'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'gender', must be one of 'MALE', 'FEMALE', 'UNKNOWN'.";
        }

        if ($this->container['birth_date'] === null) {
            $invalid_properties[] = "'birth_date' can't be null";
        }
        if ($this->container['street_name'] === null) {
            $invalid_properties[] = "'street_name' can't be null";
        }
        if ($this->container['house_number'] === null) {
            $invalid_properties[] = "'house_number' can't be null";
        }
        if (!is_null($this->container['house_number_suffix']) && (strlen($this->container['house_number_suffix']) > 10)) {
            $invalid_properties[] = "invalid value for 'house_number_suffix', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['house_number_suffix']) && (strlen($this->container['house_number_suffix']) < 0)) {
            $invalid_properties[] = "invalid value for 'house_number_suffix', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['zip_code'] === null) {
            $invalid_properties[] = "'zip_code' can't be null";
        }
        if ((strlen($this->container['zip_code']) > 20)) {
            $invalid_properties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 20.";
        }

        if ((strlen($this->container['zip_code']) < 0)) {
            $invalid_properties[] = "invalid value for 'zip_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['city'] === null) {
            $invalid_properties[] = "'city' can't be null";
        }
        if ((strlen($this->container['city']) > 150)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 150.";
        }

        if ((strlen($this->container['city']) < 0)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['country_code'] === null) {
            $invalid_properties[] = "'country_code' can't be null";
        }
        if ((strlen($this->container['country_code']) > 2)) {
            $invalid_properties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if ((strlen($this->container['country_code']) < 0)) {
            $invalid_properties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['has_different_shipping_address'] === null) {
            $invalid_properties[] = "'has_different_shipping_address' can't be null";
        }
        if (!is_null($this->container['shipping_house_number_suffix']) && (strlen($this->container['shipping_house_number_suffix']) > 10)) {
            $invalid_properties[] = "invalid value for 'shipping_house_number_suffix', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['shipping_house_number_suffix']) && (strlen($this->container['shipping_house_number_suffix']) < 0)) {
            $invalid_properties[] = "invalid value for 'shipping_house_number_suffix', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_zip_code']) && (strlen($this->container['shipping_zip_code']) > 20)) {
            $invalid_properties[] = "invalid value for 'shipping_zip_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['shipping_zip_code']) && (strlen($this->container['shipping_zip_code']) < 0)) {
            $invalid_properties[] = "invalid value for 'shipping_zip_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_city']) && (strlen($this->container['shipping_city']) > 150)) {
            $invalid_properties[] = "invalid value for 'shipping_city', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['shipping_city']) && (strlen($this->container['shipping_city']) < 0)) {
            $invalid_properties[] = "invalid value for 'shipping_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipping_country_code']) && (strlen($this->container['shipping_country_code']) > 2)) {
            $invalid_properties[] = "invalid value for 'shipping_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipping_country_code']) && (strlen($this->container['shipping_country_code']) < 0)) {
            $invalid_properties[] = "invalid value for 'shipping_country_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['phone_number'] === null) {
            $invalid_properties[] = "'phone_number' can't be null";
        }
        if ((strlen($this->container['phone_number']) > 20)) {
            $invalid_properties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 20.";
        }

        if ((strlen($this->container['phone_number']) < 0)) {
            $invalid_properties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fax_number']) && (strlen($this->container['fax_number']) > 20)) {
            $invalid_properties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['fax_number']) && (strlen($this->container['fax_number']) < 0)) {
            $invalid_properties[] = "invalid value for 'fax_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['email_address'] === null) {
            $invalid_properties[] = "'email_address' can't be null";
        }
        if ((strlen($this->container['email_address']) > 150)) {
            $invalid_properties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 150.";
        }

        if ((strlen($this->container['email_address']) < 0)) {
            $invalid_properties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['ip_address'] === null) {
            $invalid_properties[] = "'ip_address' can't be null";
        }
        if ((strlen($this->container['ip_address']) > 50)) {
            $invalid_properties[] = "invalid value for 'ip_address', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['ip_address']) < 0)) {
            $invalid_properties[] = "invalid value for 'ip_address', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['is_corporation'] === null) {
            $invalid_properties[] = "'is_corporation' can't be null";
        }
        if (!is_null($this->container['corporation_name']) && (strlen($this->container['corporation_name']) > 150)) {
            $invalid_properties[] = "invalid value for 'corporation_name', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['corporation_name']) && (strlen($this->container['corporation_name']) < 0)) {
            $invalid_properties[] = "invalid value for 'corporation_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['co_c_number']) && (strlen($this->container['co_c_number']) > 20)) {
            $invalid_properties[] = "invalid value for 'co_c_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['co_c_number']) && (strlen($this->container['co_c_number']) < 0)) {
            $invalid_properties[] = "invalid value for 'co_c_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['is_final'] === null) {
            $invalid_properties[] = "'is_final' can't be null";
        }
        if ($this->container['claim_amount'] === null) {
            $invalid_properties[] = "'claim_amount' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['last_name'] === null) {
            return false;
        }
        if (strlen($this->container['last_name']) > 100) {
            return false;
        }
        if (strlen($this->container['last_name']) < 0) {
            return false;
        }
        if ($this->container['initials'] === null) {
            return false;
        }
        if (strlen($this->container['initials']) > 10) {
            return false;
        }
        if (strlen($this->container['initials']) < 0) {
            return false;
        }
        if ($this->container['gender'] === null) {
            return false;
        }
        $allowed_values = ["MALE", "FEMALE", "UNKNOWN"];
        if (!in_array($this->container['gender'], $allowed_values)) {
            return false;
        }
        if ($this->container['birth_date'] === null) {
            return false;
        }
        if ($this->container['street_name'] === null) {
            return false;
        }
        if ($this->container['house_number'] === null) {
            return false;
        }
        if (strlen($this->container['house_number_suffix']) > 10) {
            return false;
        }
        if (strlen($this->container['house_number_suffix']) < 0) {
            return false;
        }
        if ($this->container['zip_code'] === null) {
            return false;
        }
        if (strlen($this->container['zip_code']) > 20) {
            return false;
        }
        if (strlen($this->container['zip_code']) < 0) {
            return false;
        }
        if ($this->container['city'] === null) {
            return false;
        }
        if (strlen($this->container['city']) > 150) {
            return false;
        }
        if (strlen($this->container['city']) < 0) {
            return false;
        }
        if ($this->container['country_code'] === null) {
            return false;
        }
        if (strlen($this->container['country_code']) > 2) {
            return false;
        }
        if (strlen($this->container['country_code']) < 0) {
            return false;
        }
        if ($this->container['has_different_shipping_address'] === null) {
            return false;
        }
        if (strlen($this->container['shipping_house_number_suffix']) > 10) {
            return false;
        }
        if (strlen($this->container['shipping_house_number_suffix']) < 0) {
            return false;
        }
        if (strlen($this->container['shipping_zip_code']) > 20) {
            return false;
        }
        if (strlen($this->container['shipping_zip_code']) < 0) {
            return false;
        }
        if (strlen($this->container['shipping_city']) > 150) {
            return false;
        }
        if (strlen($this->container['shipping_city']) < 0) {
            return false;
        }
        if (strlen($this->container['shipping_country_code']) > 2) {
            return false;
        }
        if (strlen($this->container['shipping_country_code']) < 0) {
            return false;
        }
        if ($this->container['phone_number'] === null) {
            return false;
        }
        if (strlen($this->container['phone_number']) > 20) {
            return false;
        }
        if (strlen($this->container['phone_number']) < 0) {
            return false;
        }
        if (strlen($this->container['fax_number']) > 20) {
            return false;
        }
        if (strlen($this->container['fax_number']) < 0) {
            return false;
        }
        if ($this->container['email_address'] === null) {
            return false;
        }
        if (strlen($this->container['email_address']) > 150) {
            return false;
        }
        if (strlen($this->container['email_address']) < 0) {
            return false;
        }
        if ($this->container['ip_address'] === null) {
            return false;
        }
        if (strlen($this->container['ip_address']) > 50) {
            return false;
        }
        if (strlen($this->container['ip_address']) < 0) {
            return false;
        }
        if ($this->container['is_corporation'] === null) {
            return false;
        }
        if (strlen($this->container['corporation_name']) > 150) {
            return false;
        }
        if (strlen($this->container['corporation_name']) < 0) {
            return false;
        }
        if (strlen($this->container['co_c_number']) > 20) {
            return false;
        }
        if (strlen($this->container['co_c_number']) < 0) {
            return false;
        }
        if ($this->container['is_final'] === null) {
            return false;
        }
        if ($this->container['claim_amount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((strlen($last_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CreditCheckRequestV2Model., must be smaller than or equal to 100.');
        }
        if ((strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets initials
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     * @param string $initials
     * @return $this
     */
    public function setInitials($initials)
    {
        if ((strlen($initials) > 10)) {
            throw new \InvalidArgumentException('invalid length for $initials when calling CreditCheckRequestV2Model., must be smaller than or equal to 10.');
        }
        if ((strlen($initials) < 0)) {
            throw new \InvalidArgumentException('invalid length for $initials when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender
     * @return $this
     */
    public function setGender($gender)
    {
        $allowed_values = array('MALE', 'FEMALE', 'UNKNOWN');
        if ((!in_array($gender, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'gender', must be one of 'MALE', 'FEMALE', 'UNKNOWN'");
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birth_date
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     * @param \DateTime $birth_date
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets street_name
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     * @param string $street_name
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     * @return int
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     * @param int $house_number
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_suffix
     * @return string
     */
    public function getHouseNumberSuffix()
    {
        return $this->container['house_number_suffix'];
    }

    /**
     * Sets house_number_suffix
     * @param string $house_number_suffix
     * @return $this
     */
    public function setHouseNumberSuffix($house_number_suffix)
    {
        if (!is_null($house_number_suffix) && (strlen($house_number_suffix) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number_suffix when calling CreditCheckRequestV2Model., must be smaller than or equal to 10.');
        }
        if (!is_null($house_number_suffix) && (strlen($house_number_suffix) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_number_suffix when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['house_number_suffix'] = $house_number_suffix;

        return $this;
    }

    /**
     * Gets zip_code
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     * @param string $zip_code
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        if ((strlen($zip_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling CreditCheckRequestV2Model., must be smaller than or equal to 20.');
        }
        if ((strlen($zip_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        if ((strlen($city) > 150)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CreditCheckRequestV2Model., must be smaller than or equal to 150.');
        }
        if ((strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        if ((strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling CreditCheckRequestV2Model., must be smaller than or equal to 2.');
        }
        if ((strlen($country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets has_different_shipping_address
     * @return bool
     */
    public function getHasDifferentShippingAddress()
    {
        return $this->container['has_different_shipping_address'];
    }

    /**
     * Sets has_different_shipping_address
     * @param bool $has_different_shipping_address
     * @return $this
     */
    public function setHasDifferentShippingAddress($has_different_shipping_address)
    {
        $this->container['has_different_shipping_address'] = $has_different_shipping_address;

        return $this;
    }

    /**
     * Gets shipping_street_name
     * @return string
     */
    public function getShippingStreetName()
    {
        return $this->container['shipping_street_name'];
    }

    /**
     * Sets shipping_street_name
     * @param string $shipping_street_name
     * @return $this
     */
    public function setShippingStreetName($shipping_street_name)
    {
        $this->container['shipping_street_name'] = $shipping_street_name;

        return $this;
    }

    /**
     * Gets shipping_house_number
     * @return int
     */
    public function getShippingHouseNumber()
    {
        return $this->container['shipping_house_number'];
    }

    /**
     * Sets shipping_house_number
     * @param int $shipping_house_number
     * @return $this
     */
    public function setShippingHouseNumber($shipping_house_number)
    {
        $this->container['shipping_house_number'] = $shipping_house_number;

        return $this;
    }

    /**
     * Gets shipping_house_number_suffix
     * @return string
     */
    public function getShippingHouseNumberSuffix()
    {
        return $this->container['shipping_house_number_suffix'];
    }

    /**
     * Sets shipping_house_number_suffix
     * @param string $shipping_house_number_suffix
     * @return $this
     */
    public function setShippingHouseNumberSuffix($shipping_house_number_suffix)
    {
        if (!is_null($shipping_house_number_suffix) && (strlen($shipping_house_number_suffix) > 10)) {
            throw new \InvalidArgumentException('invalid length for $shipping_house_number_suffix when calling CreditCheckRequestV2Model., must be smaller than or equal to 10.');
        }
        if (!is_null($shipping_house_number_suffix) && (strlen($shipping_house_number_suffix) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shipping_house_number_suffix when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['shipping_house_number_suffix'] = $shipping_house_number_suffix;

        return $this;
    }

    /**
     * Gets shipping_zip_code
     * @return string
     */
    public function getShippingZipCode()
    {
        return $this->container['shipping_zip_code'];
    }

    /**
     * Sets shipping_zip_code
     * @param string $shipping_zip_code
     * @return $this
     */
    public function setShippingZipCode($shipping_zip_code)
    {
        if (!is_null($shipping_zip_code) && (strlen($shipping_zip_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $shipping_zip_code when calling CreditCheckRequestV2Model., must be smaller than or equal to 20.');
        }
        if (!is_null($shipping_zip_code) && (strlen($shipping_zip_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shipping_zip_code when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['shipping_zip_code'] = $shipping_zip_code;

        return $this;
    }

    /**
     * Gets shipping_city
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     * @param string $shipping_city
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        if (!is_null($shipping_city) && (strlen($shipping_city) > 150)) {
            throw new \InvalidArgumentException('invalid length for $shipping_city when calling CreditCheckRequestV2Model., must be smaller than or equal to 150.');
        }
        if (!is_null($shipping_city) && (strlen($shipping_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shipping_city when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_country_code
     * @return string
     */
    public function getShippingCountryCode()
    {
        return $this->container['shipping_country_code'];
    }

    /**
     * Sets shipping_country_code
     * @param string $shipping_country_code
     * @return $this
     */
    public function setShippingCountryCode($shipping_country_code)
    {
        if (!is_null($shipping_country_code) && (strlen($shipping_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_country_code when calling CreditCheckRequestV2Model., must be smaller than or equal to 2.');
        }
        if (!is_null($shipping_country_code) && (strlen($shipping_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shipping_country_code when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['shipping_country_code'] = $shipping_country_code;

        return $this;
    }

    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if ((strlen($phone_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling CreditCheckRequestV2Model., must be smaller than or equal to 20.');
        }
        if ((strlen($phone_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     * @param string $fax_number
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        if (!is_null($fax_number) && (strlen($fax_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling CreditCheckRequestV2Model., must be smaller than or equal to 20.');
        }
        if (!is_null($fax_number) && (strlen($fax_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets email_address
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     * @param string $email_address
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if ((strlen($email_address) > 150)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling CreditCheckRequestV2Model., must be smaller than or equal to 150.');
        }
        if ((strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets ip_address
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     * @param string $ip_address
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        if ((strlen($ip_address) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling CreditCheckRequestV2Model., must be smaller than or equal to 50.');
        }
        if ((strlen($ip_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets is_corporation
     * @return bool
     */
    public function getIsCorporation()
    {
        return $this->container['is_corporation'];
    }

    /**
     * Sets is_corporation
     * @param bool $is_corporation
     * @return $this
     */
    public function setIsCorporation($is_corporation)
    {
        $this->container['is_corporation'] = $is_corporation;

        return $this;
    }

    /**
     * Gets is_sole_proprietor
     * @return bool
     */
    public function getIsSoleProprietor()
    {
        return $this->container['is_sole_proprietor'];
    }

    /**
     * Sets is_sole_proprietor
     * @param bool $is_sole_proprietor
     * @return $this
     */
    public function setIsSoleProprietor($is_sole_proprietor)
    {
        $this->container['is_sole_proprietor'] = $is_sole_proprietor;

        return $this;
    }

    /**
     * Gets corporation_name
     * @return string
     */
    public function getCorporationName()
    {
        return $this->container['corporation_name'];
    }

    /**
     * Sets corporation_name
     * @param string $corporation_name
     * @return $this
     */
    public function setCorporationName($corporation_name)
    {
        if (!is_null($corporation_name) && (strlen($corporation_name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $corporation_name when calling CreditCheckRequestV2Model., must be smaller than or equal to 150.');
        }
        if (!is_null($corporation_name) && (strlen($corporation_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $corporation_name when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['corporation_name'] = $corporation_name;

        return $this;
    }

    /**
     * Gets co_c_number
     * @return string
     */
    public function getCoCNumber()
    {
        return $this->container['co_c_number'];
    }

    /**
     * Sets co_c_number
     * @param string $co_c_number
     * @return $this
     */
    public function setCoCNumber($co_c_number)
    {
        if (!is_null($co_c_number) && (strlen($co_c_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $co_c_number when calling CreditCheckRequestV2Model., must be smaller than or equal to 20.');
        }
        if (!is_null($co_c_number) && (strlen($co_c_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $co_c_number when calling CreditCheckRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['co_c_number'] = $co_c_number;

        return $this;
    }

    /**
     * Gets is_final
     * @return bool
     */
    public function getIsFinal()
    {
        return $this->container['is_final'];
    }

    /**
     * Sets is_final
     * @param bool $is_final
     * @return $this
     */
    public function setIsFinal($is_final)
    {
        $this->container['is_final'] = $is_final;

        return $this;
    }

    /**
     * Gets claim_amount
     * @return int
     */
    public function getClaimAmount()
    {
        return $this->container['claim_amount'];
    }

    /**
     * Sets claim_amount
     * @param int $claim_amount
     * @return $this
     */
    public function setClaimAmount($claim_amount)
    {
        $this->container['claim_amount'] = $claim_amount;

        return $this;
    }

    /**
     * Gets is_in_three_installments
     * @return bool
     */
    public function getIsInThreeInstallments()
    {
        return $this->container['is_in_three_installments'];
    }

    /**
     * Sets is_in_three_installments
     * @param bool $is_in_three_installments
     * @return $this
     */
    public function setIsInThreeInstallments($is_in_three_installments)
    {
        $this->container['is_in_three_installments'] = $is_in_three_installments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        $objSer = new Tritacv2_ObjectSerializer();
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode($objSer->sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode($objSer->sanitizeForSerialization($this));
    }
}


