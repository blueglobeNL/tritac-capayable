<?php
/**
 * InvoiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Capayable API V2
 *
 * API for Pay after delivery and Pay in 3 installments
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

//namespace Swagger\Client\Api;

//use \Swagger\Client\ApiClient;
//use \Swagger\Client\ApiException;
//use \Swagger\Client\Configuration;
//use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Tritacv2_Api_InvoiceApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
    protected $logfile;
    protected $logging = false; // default false

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(Tritacv2_ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new Tritacv2_ApiClient();
        }

        $this->apiClient = $apiClient;
        $date               = date('Y-m-d');
        $this->logfile      = 'tricat_v2_lib_'.$date.'.log';
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return InvoiceApi
     */
    public function setApiClient(Tritacv2_ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation invoiceV2Post
     *
     * # Register invoice follow up    If the creditcheck succeeds, you can request a follow-up by Capayable on the payment of the invoice the webshop sends to the user. The webshop sent the invoice to the user. This call is just to notify that Capayable should follow up on it. Typically you do this Invoice call on shipping the products of the order.     Use the expected delivery date as invoice date, because from then on the customer should pay for delivery.    If the order is split into multiple shipments, do the invoice call for the entire order only on the last shipment, with the expected delivery date of that shipment as the invoice date.    ## PDF invoice    Capayable requires a PDF-copy of the invoice.  You can choose one of these options (`InvoicePdfSubmitType`):  - a. to provide a url to the invoice PDF in the invoice request   - b. to provide the invoice data in InvoicePdfData field (Capayable generates the PDF from this)   - c. If above are not possible for your shop, you can provide the invoice (PDF or text) via email.     ### a. Set invoice url  Set a full link to the PDF invoice in InvoicePdfUrl. Make sure the invoice file is not too large (max. 1 MB).     ### b. Set InvoicePdfData  Give the data of the invoice in the call.   - ProductLines: order lines for each product  - TotalLines: for shipping costs, discounts, VAT and totals (isTotal =true)    ### c. Send PDF invoice via email (BCC)  Either you include Capayable (`capayable-invoice-bcc@tritac.com`) as BCC in the order confirmation email you sent to the customer where the invoice as PDF is attached.  Or you can send a separate email to Capayable with the invoice PDF attached.If no PDF is attached, the email text body will be used as invoice and converted to PDF by the API.  The email is matched:  - the date (`InvoicePdfEmailSentDate`)  - the from email address (`InvoicePdfFromEmail`)  - the order reference in the subject (`InvoicePdfEmailSubject`). `InvoicePdfEmailSubject` does not have to match the entire subject, that is contained with the subject is sufficient.    E.g. subject = \"Order confirmation O-123 in yourshop.nl\", and `InvoicePdfEmailSubject` = \"O-123\" is fine.    You have to send this email within an hour after the invoice request. It is also possible to send it earlier, for example around the time of the final creditcheck. Then, it will be matched after youâ€™ve sent in the invoice request.
     *
     * @param \Swagger\Client\Model\InvoiceRequestV2Model $model  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InvoiceResult
     */
    public function invoiceV2Post($model)
    {
        // verify the required parameter 'model' is set
        if ($model === null) {
            if($this->logging) {
                Mage::log('invoiceV2Post error model missing', null, $this->logfile);
            }
            throw new \InvalidArgumentException('Missing the required parameter $model when calling invoiceV2Post');
        }
        // parse inputs
        $resourcePath   = "/v2/invoice";
        $httpBody       = '';
        $queryParams    = [];
        $headerParams   = [];
        $formParams     = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/xml', 'application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['apikey'] = $apiKey;
        }
        // make the API Call
        try {
            $invoiceResult = new Tritacv2_Model_InvoiceResult();
            //list($response, $statusCode, $httpHeader)
            $result = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                $invoiceResult,
                '/v2/invoice'
            );

            if($this->logging) {
                Mage::log('invoiceV2Post show result', null, $this->logfile);
                Mage::log($result, null, $this->logfile);
            }

            //return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InvoiceResult', $httpHeader), $statusCode, $httpHeader];
            $response   = $result[0];
            $statusCode = $result[1];
            $httpHeader = $result[2];
            if($this->logging) {
                Mage::log('invoiceV2Post show response', null, $this->logfile);
                Mage::log($response, null, $this->logfile);
                Mage::log('invoiceV2Post show statusCode', null, $this->logfile);
                Mage::log($statusCode, null, $this->logfile);
                Mage::log('invoiceV2Post show httpHeader', null, $this->logfile);
                Mage::log($httpHeader, null, $this->logfile);
                Mage::log('invoiceV2Post show creditCheckResult', null, $this->logfile);
                Mage::log($invoiceResult, null, $this->logfile);
            }
            $invoiceResult->setIsAccepted($response->IsAccepted);
            $invoiceResult->setPaymentUrl($response->PaymentUrl);

            if($this->logging) {
                Mage::log('invoiceV2Post show creditCheckResult now', null, $this->logfile);
                Mage::log($invoiceResult, null, $this->logfile);
            }

            return $invoiceResult;
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InvoiceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
