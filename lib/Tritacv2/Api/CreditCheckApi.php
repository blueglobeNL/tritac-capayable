<?php
/**
 * CreditCheckApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Capayable API V2
 *
 * API for Pay after delivery and Pay in 3 installments
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually. ha ha.
 */

/**
 * CreditCheckApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Tritacv2_Api_CreditCheckApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
    protected $logfile;
    protected $logging = false; // default false

    protected $refuseReasons = array(
        1 => 'AMOUNT_EXCEEDS_LIMIT',
        2 => 'BALANCE_EXCEEDS_LIMIT',
        3 => 'NOT_CREDITWORTHY',
        4 => 'CREDITCHECK_UNAVAILABLE',
        5 => 'NOT_FOUND',
        6 => 'ADDRESS_BLOCKED',
        7 => 'TOO_YOUNG',
        8 => 'DIFFERENT_SHIPPING_ADDRESS',
        9 => 'SHIPPING_ADDRESS_BLOCKED',
        10 => 'IP_ADDRESS_BLOCKED',
        11 => 'COUNTRY_BLOCKED',
        12 => 'SHIPPING_COUNTRY_BLOCKED',
        13 => 'AMOUNT_TOO_LOW',
        14 => 'TOO_MANY_OPEN_INVOICES',
        15 => 'IP_ADDRESS_BLOCKED_MULTIPLE_ORDERS_WITHIN_24HRS'
    );

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(Tritacv2_ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new Tritacv2_ApiClient();
        }

        $this->apiClient    = $apiClient;
        $date               = date('Y-m-d');
        $this->logfile      = 'tricat_v2_lib_'.$date.'.log';
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CreditCheckApi
     */
    public function setApiClient(Tritacv2_ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation creditCheckV2Post
     *
     * # Request credit check     You can perform a credit check on a user.If accepted, the order is final and is going to be paid on invoice.Remember to store the TransactionNumber of the response somewhere with the order, you’ll need it for the invoice follow up.                 The credit check counts as registering an order, so it has to be followed up by an invoice or a cancellation.If not, the order will remain open and may block the customer from doing another order with Capayable.                Note: the credit check on the live environment may take a while, so be sure to set longer timeouts (max 2 minutes). .    In the test environment, use the LastName ‘Refuse’ to get a refused response (`IsAccepted` = `false`) with a random refuse reason.    In the production environment IsFinal should always be ‘true’. In your test environment, you can use ‘false’ while building your connection, as it will not actually register an order and therefore allow you to do multiple checks on the same address(and TransactionNumber will be empty).    ## Refuse reason     There are several possible reasons for refusing:  1. Each shop has an order amount limit above which pay after delivery by Capayable is not available. `AMOUNT_EXCEEDS_LIMIT` (1) means the order amount is above this limit.  2. There is a limit on the unpaid sum of all orders with this shops or other shops using Capayable. `BALANCE_EXCEEDS_LIMIT` (2) means the order amount plus the balance of unpaid orders by the customer is above this limit  3. Capayable uses services for the actual credit check (B2C: Experian, B2B: Graydon). `NOT_CREDITWORTHY` (3) means the customer is not accepted for credit by this service.   4. `CREDITCHECK_UNAVAILABLE` (4) means the extern credit check service is not be available.  5. `NOT_FOUND` (5) means the corporation could not be found based on its name and/or its address(B2B only).  In all cases the relevant contact info for the customer (or shop) is returned: the name of the company and a phone number.The customer can contact this number if he has questions about the refusal.
     *
     * @param \Swagger\Client\Model\CreditCheckRequestV2Model $model  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CreditCheckResult
     */
    public function creditCheckV2Post($model)
    {
        // verify the required parameter 'model' is set
        if ($model === null) {
            if($this->logging) {
                Mage::log('creditCheckV2Post error model missing', null, $this->logfile);
            }
            throw new \InvalidArgumentException('Missing the required parameter $model when calling creditCheckV2Post');
        }
        // parse inputs
        $resourcePath   = "/v2/creditcheck";
        $httpBody       = '';
        $queryParams    = [];
        $headerParams   = [];
        $formParams     = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/xml', 'application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['apikey'] = $apiKey;
        }

        if($this->logging) {
            Mage::log('creditCheckV2Post headerParams:', null, $this->logfile);
            Mage::log($headerParams, null, $this->logfile);
            Mage::log('creditCheckV2Post httpBody', null, $this->logfile);
            Mage::log($httpBody, null, $this->logfile);
            Mage::log('creditCheckV2Post apiKey', null, $this->logfile);
            Mage::log($apiKey, null, $this->logfile);
        }
        try {
            $creditCheckResult = new Tritacv2_Model_CreditCheckResult();
            //list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
            $result = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                $creditCheckResult,
                '/v2/creditcheck'
            );
            if($this->logging) {
                Mage::log('creditCheckV2Post show result', null, $this->logfile);
                Mage::log($result, null, $this->logfile);
            }
            //list($response, $statusCode, $httpHeader) = $result;
            $response   = $result[0];
            $statusCode = $result[1];
            $httpHeader = $result[2];
            if($this->logging) {
                Mage::log('creditCheckV2Post show response', null, $this->logfile);
                Mage::log($response, null, $this->logfile);
                Mage::log('creditCheckV2Post show statusCode', null, $this->logfile);
                Mage::log($statusCode, null, $this->logfile);
                Mage::log('creditCheckV2Post show httpHeader', null, $this->logfile);
                Mage::log($httpHeader, null, $this->logfile);
                Mage::log('creditCheckV2Post show creditCheckResult', null, $this->logfile);
                Mage::log($creditCheckResult, null, $this->logfile);
            }
            $creditCheckResult->setIsAccepted($response->IsAccepted);
            $creditCheckResult->setTransactionNumber($response->TransactionNumber);
            // deze werkt niet, zie mail aan Tritac op 6 april 2017
            // $creditCheckResult->setRefuseReason($response->RefuseReason);
            // only note refuseReason if IsAccepted is false (mail 7 april 2017)
            if($response->IsAccepted == 0) {
                $refuseReasonNr     = (int)$response->RefuseReason;
                $refuseReason       = $this->refuseReasons[$refuseReasonNr];
            }
            $creditCheckResult->setRefuseContactName($response->RefuseContactName);
            $creditCheckResult->setRefuseContactPhoneNumber($response->RefuseContactPhoneNumber);
            $creditCheckResult->setFirstInstallmentAmount($response->FirstInstallmentAmount);

            if($this->logging) {
                Mage::log('creditCheckV2Post show creditCheckResult now', null, $this->logfile);
                Mage::log($creditCheckResult, null, $this->logfile);
            }

            return $creditCheckResult;

        } catch (Tritacv2_ApiException $e) {
            Mage::log('creditCheckV2Post Exception : ', null, $this->logfile);
            Mage::log($e, null, $this->logfile);
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), $creditCheckResult, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
