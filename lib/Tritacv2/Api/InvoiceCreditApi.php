<?php
/**
 * InvoiceCreditApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Capayable API V2
 *
 * API for Pay after delivery and Pay in 3 installments
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

//namespace Swagger\Client\Api;

//use \Swagger\Client\ApiClient;
//use \Swagger\Client\ApiException;
//use \Swagger\Client\Configuration;
//use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceCreditApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Tritacv2_Api_InvoiceCreditApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
    protected $logfile;
    protected $logging = false; // default false

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(Tritacv2_ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient      = new ApiClient();
        }

        $this->apiClient    = $apiClient;
        $date               = date('Y-m-d');
        $this->logfile      = 'tricat_v2_lib_'.$date.'.log';
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return InvoiceCreditApi
     */
    public function setApiClient(Tritacv2_ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation invoiceCreditV2Post
     *
     * # Register a return:  credit on invoice / refund  If a customer returns a product to the webshop, the shop can refund him.Therefore you can notify capayable of returns which result in a credit of the invoice.    If the invoice is ready (partially) paid, Capayable will do a regular (partial) refund. Otherwise the invoice is credited, so the customer has to pay less(or nothing). Either case is a concern for Capayable, not the shop.    You can do multiple invoice credit calls on a single invoice.The total amount can be somewhat larger than the original amount, so the shop can refund extra return shipping costs if desired.    Because Capayable starts reminding the customer after 2 weeks, returns after 14 days will NOT be accepted (Result = `EXCEEDS_PERIOD_LIMIT`). So, when using Capayable pay after delivery, customer has 14 days (counting from last delivery date, sent to Capayable as `InvoiceDate`) to return (part of) his order.    ### (Partially) undeliverable  If an order can only be partially sent, or not at all (because for instance the product is out of stock), then follow the same logic as with cancellations after invoice:   - Do an invoice call for the entire order  - Provide the actual invoice by url or BCC email  - Register an invoice credit for the amount of undeliverable products.
     *
     * @param \Swagger\Client\Model\InvoiceCreditRequestV2Model $model  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InvoiceCreditResult
     */
    public function invoiceCreditV2Post($model)
    {
        list($response) = $this->invoiceCreditV2PostWithHttpInfo($model);
        return $response;
    }

    /**
     * Operation invoiceCreditV2PostWithHttpInfo
     *
     * # Register a return:  credit on invoice / refund  If a customer returns a product to the webshop, the shop can refund him.Therefore you can notify capayable of returns which result in a credit of the invoice.    If the invoice is ready (partially) paid, Capayable will do a regular (partial) refund. Otherwise the invoice is credited, so the customer has to pay less(or nothing). Either case is a concern for Capayable, not the shop.    You can do multiple invoice credit calls on a single invoice.The total amount can be somewhat larger than the original amount, so the shop can refund extra return shipping costs if desired.    Because Capayable starts reminding the customer after 2 weeks, returns after 14 days will NOT be accepted (Result = `EXCEEDS_PERIOD_LIMIT`). So, when using Capayable pay after delivery, customer has 14 days (counting from last delivery date, sent to Capayable as `InvoiceDate`) to return (part of) his order.    ### (Partially) undeliverable  If an order can only be partially sent, or not at all (because for instance the product is out of stock), then follow the same logic as with cancellations after invoice:   - Do an invoice call for the entire order  - Provide the actual invoice by url or BCC email  - Register an invoice credit for the amount of undeliverable products.
     *
     * @param \Swagger\Client\Model\InvoiceCreditRequestV2Model $model  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InvoiceCreditResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoiceCreditV2PostWithHttpInfo($model)
    {
        // verify the required parameter 'model' is set
        if ($model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model when calling invoiceCreditV2Post');
        }
        // parse inputs
        $resourcePath   = "/v2/invoicecredit";
        $httpBody       = '';
        $queryParams    = [];
        $headerParams   = [];
        $formParams     = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'text/json', 'text/xml', 'application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model)) {
            $_tempBody = $model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['apikey'] = $apiKey;
        }
        // make the API Call
        try {
            $invCrdtResult = new Tritacv2_Model_InvoiceCreditResult();
            //list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
            $result = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                $invCrdtResult,
                '/v2/invoicecredit'
            );

            if($this->logging) {
                Mage::log('invoiceCreditApiPost show result', null, $this->logfile);
                Mage::log($result, null, $this->logfile);
            }

            $response   = $result[0];
            $statusCode = $result[1];
            $httpHeader = $result[2];
            if($this->logging) {
                Mage::log('invoiceCreditApiPost show response', null, $this->logfile);
                Mage::log($response, null, $this->logfile);
                Mage::log('invoiceCreditApiPost show statusCode', null, $this->logfile);
                Mage::log($statusCode, null, $this->logfile);
                Mage::log('invoiceCreditApiPost show httpHeader', null, $this->logfile);
                Mage::log($httpHeader, null, $this->logfile);
                Mage::log('invoiceCreditApiPost show creditCheckResult', null, $this->logfile);
                Mage::log($invCrdtResult, null, $this->logfile);
            }
            $invCrdtResult->setResult($response->Result);
            $invCrdtResult->setAmountNotCredited($response->AmountNotCredited);
            $invCrdtResult->setAmountCredited($response->AmountCredited);

            if($this->logging) {
                Mage::log('invoiceV2Post show creditCheckResult now', null, $this->logfile);
                Mage::log($invCrdtResult, null, $this->logfile);
            }

            return $invCrdtResult;

            //return [$this->apiClient->getSerializer()->deserialize($response, $invCrdtResult, $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), $invCrdtResult, $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }
}
